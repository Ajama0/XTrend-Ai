package com.example.Xtrend_Ai.service;

import com.example.Xtrend_Ai.dto.GPTRequest;
import com.example.Xtrend_Ai.dto.GptResponse;
import com.example.Xtrend_Ai.utils.ChatMessage;
import com.example.Xtrend_Ai.utils.Choices;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClient;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class GPTService {

    private final RestClient restClient;

    @Value("${gpt.key}")
    private String gptKey;

    @Value("${gpt.url}")
    private String gptUrl;


    public String getGptResponse(String prompt){

        /// build the message object
        ChatMessage chatMessage = ChatMessage
                .builder()
                .role("user")
                .content(prompt) /// passed in from generate Prompt method
                .build();

        /// building the request object
        GPTRequest request = GPTRequest.builder()
                .model("gpt-4o")
                .messages(Collections.singletonList(chatMessage))
                .build();

        ResponseEntity<GptResponse> response = restClient.post()
                .uri(gptUrl)
                .contentType(MediaType.APPLICATION_JSON)
                .body(request)
                .headers(header ->header.setBearerAuth(gptKey) )
                .retrieve()
                .toEntity(GptResponse.class);

        if(response.getStatusCode().is2xxSuccessful() && !response.getBody().getChoices().isEmpty()){
            log.info("success");
            Choices returnedChoice = response.getBody().getChoices().get(0);
            String messageResponse = returnedChoice.getMessages().getContent();
            return messageResponse;

        }
    }

    public String generatePrompt(String articleContent, String username){
        return """
           Read the following article thoroughly. Based on its content, generate a detailed and engaging blog post while strictly staying within the article's topic. 
           Follow these guidelines:

           1. Content Adaptation:
              - Adjust the tone to be conversational and relatable for a blog audience.
              - Rewrite and restructure the original text to produce a fresh, original pieceâ€”avoid verbatim copying.
              - Ensure that the blog post reflects the key points and insights of the article.

           2. Length Considerations:
              - Aim for a blog post of approximately 1,200 to 1,800 words.
              - Condense or expand the information as needed while preserving clarity and substance.

           3. Structural Elements:
              - Craft a compelling headline that incorporates relevant keywords.
              - Begin with a strong introduction that immediately engages the reader.
              - Organize the content into clearly defined sections with subheadings, bullet points, and short paragraphs for easy readability.
              - Conclude with a summary of the main points and include proper citations of the original article.

           4. Attribution:
              - At the very end of the blog post, include an attribution line that acknowledges the creator. Format it as:
                "Blog generated by: %s"

           5. Consistency:
              - The entire blog must remain on topic and base its content solely on the article provided.
              - Do not introduce new topics or unrelated information.

           Here is the article content:
           %s

           """.formatted(username, articleContent);
    }

}
